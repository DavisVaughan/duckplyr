diff --git b/R/relocate.R a/R/relocate.R
index 26e62c1..f6e6bbb 100644
--- b/R/relocate.R
+++ a/R/relocate.R
@@ -2,14 +2,6 @@
 #' @importFrom dplyr relocate
 #' @export
 relocate.duckplyr_df <- function(.data, ..., .before = NULL, .after = NULL) {
-  # Our implementation
-  x_df <- .data
-  class(x_df) <- "data.frame"
-  out <- relocate(x_df, ..., .before = {{ .before }}, .after = {{ .after }})
-  out <- dplyr_reconstruct(out, .data)
-  return(out)
-
-  # dplyr implementation
   loc <- eval_relocate(
     expr = expr(c(...)),
     data = .data,
@@ -19,6 +11,28 @@ relocate.duckplyr_df <- function(.data, ..., .before = NULL, .after = NULL) {
     after_arg = ".after"
   )
 
+  # Our implementation
+  exprs <- exprs_from_loc(.data, loc)
+
+  # Ensure `relocate()` appears in call stack
+  relocate <- rel_try
+  relocate(
+    "Can't use relational with zero-column result set." = (length(exprs) == 0),
+    {
+      rel <- duckdb_rel_from_df(.data)
+    }, fallback = {
+      x_df <- .data
+      class(x_df) <- "data.frame"
+      out <- relocate(x_df, ..., .before = {{ .before }}, .after = {{ .after }})
+      out <- dplyr_reconstruct(out, .data)
+      return(out)
+    }
+  )
+
+  out <- exprs_project(rel, exprs, .data)
+  return(out)
+
+  # dplyr implementation
   out <- dplyr_col_select(.data, loc)
   out <- set_names(out, names(loc))
 
